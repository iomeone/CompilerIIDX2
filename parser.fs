// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"

#indent "off"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())

# 13 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RPAREN
  | LPAREN
  | SEMICOLON
  | LESS_MINUS
  | DOT
  | ARRAY_CREATE
  | COMMA
  | REC
  | IN
  | LET
  | IDENT of (Id.t)
  | SQRT
  | ELSE
  | THEN
  | IF
  | GREATER
  | LESS
  | GREATER_EQUAL
  | LESS_EQUAL
  | LESS_GREATER
  | EQUAL
  | SLASH_DOT
  | AST_DOT
  | PLUS_DOT
  | MINUS_DOT
  | SLASH
  | AST
  | PLUS
  | MINUS
  | NOT
  | FLOAT of (float)
  | INT of (int)
  | BOOL of (bool)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_SEMICOLON
    | TOKEN_LESS_MINUS
    | TOKEN_DOT
    | TOKEN_ARRAY_CREATE
    | TOKEN_COMMA
    | TOKEN_REC
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_IDENT
    | TOKEN_SQRT
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATER_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_LESS_GREATER
    | TOKEN_EQUAL
    | TOKEN_SLASH_DOT
    | TOKEN_AST_DOT
    | TOKEN_PLUS_DOT
    | TOKEN_MINUS_DOT
    | TOKEN_SLASH
    | TOKEN_AST
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_NOT
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexp
    | NONTERM_simple_exp
    | NONTERM_exp
    | NONTERM_fundef
    | NONTERM_formal_args
    | NONTERM_actual_args
    | NONTERM_elems
    | NONTERM_pat

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RPAREN  -> 1 
  | LPAREN  -> 2 
  | SEMICOLON  -> 3 
  | LESS_MINUS  -> 4 
  | DOT  -> 5 
  | ARRAY_CREATE  -> 6 
  | COMMA  -> 7 
  | REC  -> 8 
  | IN  -> 9 
  | LET  -> 10 
  | IDENT _ -> 11 
  | SQRT  -> 12 
  | ELSE  -> 13 
  | THEN  -> 14 
  | IF  -> 15 
  | GREATER  -> 16 
  | LESS  -> 17 
  | GREATER_EQUAL  -> 18 
  | LESS_EQUAL  -> 19 
  | LESS_GREATER  -> 20 
  | EQUAL  -> 21 
  | SLASH_DOT  -> 22 
  | AST_DOT  -> 23 
  | PLUS_DOT  -> 24 
  | MINUS_DOT  -> 25 
  | SLASH  -> 26 
  | AST  -> 27 
  | PLUS  -> 28 
  | MINUS  -> 29 
  | NOT  -> 30 
  | FLOAT _ -> 31 
  | INT _ -> 32 
  | BOOL _ -> 33 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_LPAREN 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_LESS_MINUS 
  | 5 -> TOKEN_DOT 
  | 6 -> TOKEN_ARRAY_CREATE 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_REC 
  | 9 -> TOKEN_IN 
  | 10 -> TOKEN_LET 
  | 11 -> TOKEN_IDENT 
  | 12 -> TOKEN_SQRT 
  | 13 -> TOKEN_ELSE 
  | 14 -> TOKEN_THEN 
  | 15 -> TOKEN_IF 
  | 16 -> TOKEN_GREATER 
  | 17 -> TOKEN_LESS 
  | 18 -> TOKEN_GREATER_EQUAL 
  | 19 -> TOKEN_LESS_EQUAL 
  | 20 -> TOKEN_LESS_GREATER 
  | 21 -> TOKEN_EQUAL 
  | 22 -> TOKEN_SLASH_DOT 
  | 23 -> TOKEN_AST_DOT 
  | 24 -> TOKEN_PLUS_DOT 
  | 25 -> TOKEN_MINUS_DOT 
  | 26 -> TOKEN_SLASH 
  | 27 -> TOKEN_AST 
  | 28 -> TOKEN_PLUS 
  | 29 -> TOKEN_MINUS 
  | 30 -> TOKEN_NOT 
  | 31 -> TOKEN_FLOAT 
  | 32 -> TOKEN_INT 
  | 33 -> TOKEN_BOOL 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexp 
    | 1 -> NONTERM_simple_exp 
    | 2 -> NONTERM_simple_exp 
    | 3 -> NONTERM_simple_exp 
    | 4 -> NONTERM_simple_exp 
    | 5 -> NONTERM_simple_exp 
    | 6 -> NONTERM_simple_exp 
    | 7 -> NONTERM_simple_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exp 
    | 22 -> NONTERM_exp 
    | 23 -> NONTERM_exp 
    | 24 -> NONTERM_exp 
    | 25 -> NONTERM_exp 
    | 26 -> NONTERM_exp 
    | 27 -> NONTERM_exp 
    | 28 -> NONTERM_exp 
    | 29 -> NONTERM_exp 
    | 30 -> NONTERM_exp 
    | 31 -> NONTERM_exp 
    | 32 -> NONTERM_exp 
    | 33 -> NONTERM_exp 
    | 34 -> NONTERM_exp 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_fundef 
    | 38 -> NONTERM_formal_args 
    | 39 -> NONTERM_formal_args 
    | 40 -> NONTERM_actual_args 
    | 41 -> NONTERM_actual_args 
    | 42 -> NONTERM_elems 
    | 43 -> NONTERM_elems 
    | 44 -> NONTERM_pat 
    | 45 -> NONTERM_pat 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | SEMICOLON  -> "SEMICOLON" 
  | LESS_MINUS  -> "LESS_MINUS" 
  | DOT  -> "DOT" 
  | ARRAY_CREATE  -> "ARRAY_CREATE" 
  | COMMA  -> "COMMA" 
  | REC  -> "REC" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | IDENT _ -> "IDENT" 
  | SQRT  -> "SQRT" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | IF  -> "IF" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATER_EQUAL  -> "GREATER_EQUAL" 
  | LESS_EQUAL  -> "LESS_EQUAL" 
  | LESS_GREATER  -> "LESS_GREATER" 
  | EQUAL  -> "EQUAL" 
  | SLASH_DOT  -> "SLASH_DOT" 
  | AST_DOT  -> "AST_DOT" 
  | PLUS_DOT  -> "PLUS_DOT" 
  | MINUS_DOT  -> "MINUS_DOT" 
  | SLASH  -> "SLASH" 
  | AST  -> "AST" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | NOT  -> "NOT" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | BOOL _ -> "BOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LESS_MINUS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | ARRAY_CREATE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SQRT  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER_EQUAL  -> (null : System.Object) 
  | LESS_EQUAL  -> (null : System.Object) 
  | LESS_GREATER  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SLASH_DOT  -> (null : System.Object) 
  | AST_DOT  -> (null : System.Object) 
  | PLUS_DOT  -> (null : System.Object) 
  | MINUS_DOT  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | AST  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 73us; 65535us; 0us; 10us; 1us; 14us; 2us; 10us; 3us; 14us; 11us; 12us; 17us; 10us; 18us; 10us; 19us; 14us; 20us; 14us; 23us; 10us; 24us; 14us; 25us; 10us; 26us; 14us; 27us; 10us; 28us; 14us; 29us; 14us; 30us; 14us; 31us; 14us; 32us; 14us; 33us; 14us; 34us; 14us; 35us; 14us; 36us; 14us; 37us; 14us; 38us; 14us; 39us; 14us; 40us; 14us; 41us; 14us; 42us; 14us; 43us; 14us; 44us; 14us; 45us; 14us; 46us; 14us; 47us; 14us; 48us; 14us; 49us; 14us; 50us; 14us; 51us; 14us; 52us; 14us; 53us; 14us; 54us; 14us; 55us; 14us; 56us; 14us; 57us; 10us; 58us; 10us; 59us; 10us; 60us; 10us; 61us; 10us; 62us; 10us; 63us; 10us; 64us; 10us; 65us; 10us; 66us; 10us; 67us; 10us; 68us; 10us; 69us; 10us; 70us; 10us; 71us; 10us; 72us; 10us; 73us; 10us; 74us; 10us; 77us; 10us; 78us; 10us; 81us; 10us; 82us; 13us; 87us; 10us; 88us; 10us; 89us; 10us; 90us; 10us; 91us; 11us; 95us; 10us; 98us; 10us; 99us; 10us; 35us; 65535us; 0us; 1us; 2us; 3us; 17us; 20us; 18us; 19us; 23us; 24us; 25us; 26us; 27us; 28us; 57us; 29us; 58us; 30us; 59us; 31us; 60us; 32us; 61us; 33us; 62us; 34us; 63us; 35us; 64us; 36us; 65us; 37us; 66us; 38us; 67us; 39us; 68us; 40us; 69us; 41us; 70us; 42us; 71us; 43us; 72us; 44us; 73us; 45us; 74us; 46us; 77us; 47us; 78us; 48us; 81us; 49us; 87us; 50us; 88us; 51us; 89us; 52us; 90us; 53us; 95us; 54us; 98us; 55us; 99us; 56us; 1us; 65535us; 79us; 80us; 2us; 65535us; 93us; 94us; 96us; 97us; 35us; 65535us; 1us; 82us; 3us; 82us; 19us; 82us; 20us; 82us; 24us; 82us; 26us; 82us; 28us; 82us; 29us; 82us; 30us; 82us; 31us; 82us; 32us; 82us; 33us; 82us; 34us; 82us; 35us; 82us; 36us; 82us; 37us; 82us; 38us; 82us; 39us; 82us; 40us; 82us; 41us; 82us; 42us; 82us; 43us; 82us; 44us; 82us; 45us; 82us; 46us; 82us; 47us; 82us; 48us; 82us; 49us; 82us; 50us; 82us; 51us; 82us; 52us; 82us; 53us; 82us; 54us; 82us; 55us; 82us; 56us; 82us; 35us; 65535us; 0us; 83us; 2us; 83us; 17us; 83us; 18us; 83us; 23us; 83us; 25us; 83us; 27us; 83us; 57us; 83us; 58us; 83us; 59us; 83us; 60us; 83us; 61us; 83us; 62us; 83us; 63us; 83us; 64us; 83us; 65us; 83us; 66us; 83us; 67us; 83us; 68us; 83us; 69us; 83us; 70us; 83us; 71us; 83us; 72us; 83us; 73us; 83us; 74us; 83us; 77us; 83us; 78us; 83us; 81us; 83us; 87us; 83us; 88us; 83us; 89us; 83us; 90us; 83us; 95us; 83us; 98us; 83us; 99us; 83us; 1us; 65535us; 84us; 85us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 75us; 111us; 113us; 116us; 152us; 188us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 18us; 0us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 2us; 1us; 2us; 18us; 1us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 3us; 7us; 8us; 33us; 2us; 7us; 35us; 2us; 7us; 35us; 2us; 7us; 40us; 2us; 7us; 41us; 1us; 7us; 2us; 7us; 33us; 1us; 7us; 2us; 7us; 33us; 19us; 7us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 33us; 34us; 43us; 18us; 7us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 1us; 7us; 2us; 7us; 33us; 1us; 9us; 18us; 9us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 1us; 10us; 18us; 10us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 1us; 11us; 18us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 25us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 26us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 27us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 28us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 28us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 29us; 30us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 32us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 32us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 33us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 34us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 37us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 42us; 43us; 18us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 24us; 25us; 26us; 27us; 30us; 34us; 43us; 43us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 3us; 28us; 29us; 32us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 2us; 30us; 40us; 2us; 31us; 42us; 1us; 32us; 2us; 32us; 44us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 2us; 38us; 39us; 1us; 38us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 45us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 21us; 24us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 59us; 62us; 65us; 68us; 71us; 73us; 76us; 78us; 81us; 101us; 120us; 122us; 125us; 127us; 146us; 148us; 167us; 169us; 188us; 207us; 226us; 245us; 264us; 283us; 302us; 321us; 340us; 359us; 378us; 397us; 416us; 435us; 454us; 473us; 492us; 511us; 530us; 549us; 568us; 587us; 606us; 625us; 644us; 663us; 682us; 701us; 720us; 722us; 724us; 726us; 728us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 748us; 750us; 752us; 754us; 756us; 760us; 762us; 764us; 766us; 768us; 770us; 772us; 775us; 778us; 780us; 783us; 785us; 787us; 789us; 791us; 793us; 795us; 797us; 799us; 801us; 803us; 806us; 808us; 810us; 812us; 814us; 816us; 818us; 820us; |]
let _fsyacc_action_rows = 105
let _fsyacc_actionTableElements = [|13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 21us; 49152us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 14us; 32768us; 1us; 5us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 22us; 32768us; 1us; 4us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16392us; 5us; 16us; 6us; 32768us; 2us; 2us; 5us; 15us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 1us; 16419us; 5us; 15us; 1us; 16424us; 5us; 15us; 1us; 16425us; 5us; 15us; 1us; 32768us; 2us; 17us; 1us; 32768us; 2us; 18us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 22us; 32768us; 1us; 22us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 22us; 32768us; 1us; 21us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 0us; 16391us; 1us; 16391us; 4us; 89us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 5us; 16393us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 5us; 16394us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 5us; 16395us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 9us; 16396us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 26us; 60us; 27us; 59us; 31us; 8us; 32us; 7us; 33us; 6us; 9us; 16397us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 26us; 60us; 27us; 59us; 31us; 8us; 32us; 7us; 33us; 6us; 5us; 16398us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 5us; 16399us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 16400us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 16401us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 16402us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 16403us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 16404us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 16405us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 22us; 32768us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 14us; 68us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 22us; 32768us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 13us; 69us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 20us; 16406us; 2us; 2us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 5us; 16407us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 9us; 16408us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 26us; 60us; 27us; 59us; 31us; 8us; 32us; 7us; 33us; 6us; 9us; 16409us; 2us; 2us; 11us; 9us; 22us; 74us; 23us; 73us; 26us; 60us; 27us; 59us; 31us; 8us; 32us; 7us; 33us; 6us; 5us; 16410us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 5us; 16411us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 22us; 32768us; 2us; 2us; 3us; 90us; 7us; 99us; 9us; 78us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 21us; 16412us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 21us; 16413us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 22us; 32768us; 2us; 2us; 3us; 90us; 7us; 99us; 9us; 88us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 21us; 16416us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 20us; 16417us; 2us; 2us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 21us; 16418us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 21us; 16421us; 2us; 2us; 3us; 90us; 7us; 99us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 19us; 16426us; 2us; 2us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 19us; 16427us; 2us; 2us; 11us; 9us; 16us; 64us; 17us; 63us; 18us; 66us; 19us; 65us; 20us; 62us; 21us; 61us; 22us; 74us; 23us; 73us; 24us; 71us; 25us; 72us; 26us; 60us; 27us; 59us; 28us; 57us; 29us; 58us; 31us; 8us; 32us; 7us; 33us; 6us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 3us; 32768us; 2us; 84us; 8us; 79us; 11us; 76us; 1us; 32768us; 21us; 77us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 1us; 32768us; 11us; 93us; 1us; 32768us; 9us; 81us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 5us; 16414us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 1us; 16415us; 7us; 98us; 1us; 32768us; 11us; 102us; 2us; 32768us; 1us; 86us; 7us; 100us; 1us; 32768us; 21us; 87us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 5us; 32768us; 2us; 2us; 11us; 9us; 31us; 8us; 32us; 7us; 33us; 6us; 0us; 16420us; 1us; 32768us; 11us; 96us; 1us; 32768us; 21us; 95us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 1us; 16423us; 11us; 96us; 0us; 16422us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 13us; 32768us; 2us; 2us; 6us; 91us; 10us; 75us; 11us; 9us; 12us; 25us; 15us; 67us; 25us; 70us; 29us; 27us; 30us; 23us; 31us; 8us; 32us; 7us; 33us; 6us; 34us; 92us; 1us; 32768us; 11us; 101us; 0us; 16428us; 1us; 32768us; 7us; 103us; 1us; 32768us; 11us; 104us; 0us; 16429us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 14us; 36us; 51us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 82us; 89us; 91us; 93us; 95us; 97us; 99us; 113us; 127us; 150us; 173us; 174us; 176us; 190us; 196us; 210us; 216us; 230us; 236us; 246us; 256us; 262us; 268us; 282us; 296us; 310us; 324us; 338us; 352us; 375us; 398us; 419us; 425us; 435us; 445us; 451us; 457us; 480us; 502us; 524us; 547us; 569us; 590us; 612us; 634us; 654us; 674us; 688us; 702us; 716us; 730us; 744us; 758us; 772us; 786us; 800us; 814us; 828us; 842us; 856us; 870us; 884us; 898us; 912us; 926us; 930us; 932us; 946us; 960us; 962us; 964us; 978us; 984us; 986us; 988us; 991us; 993us; 1007us; 1021us; 1035us; 1049us; 1055us; 1056us; 1058us; 1060us; 1074us; 1076us; 1077us; 1091us; 1105us; 1107us; 1108us; 1110us; 1112us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 2us; 1us; 1us; 1us; 1us; 5us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 2us; 3us; 3us; 3us; 3us; 6us; 5us; 2us; 1us; 8us; 7us; 3us; 3us; 1us; 4us; 2us; 1us; 2us; 1us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 16428us; 65535us; 65535us; 16429us; |]
let _fsyacc_reductions ()  =    [| 
# 318 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startexp));
# 327 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "parser.fsy"
                           _2 
                   )
# 65 "parser.fsy"
                 : 'simple_exp));
# 338 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "parser.fsy"
                           Unit 
                   )
# 67 "parser.fsy"
                 : 'simple_exp));
# 348 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "parser.fsy"
                           Bool(_1) 
                   )
# 69 "parser.fsy"
                 : 'simple_exp));
# 359 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "parser.fsy"
                           Int(_1) 
                   )
# 71 "parser.fsy"
                 : 'simple_exp));
# 370 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "parser.fsy"
                           Float(_1) 
                   )
# 73 "parser.fsy"
                 : 'simple_exp));
# 381 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "parser.fsy"
                           Var(_1) 
                   )
# 75 "parser.fsy"
                 : 'simple_exp));
# 392 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "parser.fsy"
                           Get(_1, _4) 
                   )
# 77 "parser.fsy"
                 : 'simple_exp));
# 404 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "parser.fsy"
                           _1 
                   )
# 81 "parser.fsy"
                 : Syntax.t));
# 415 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "parser.fsy"
                           Not(_2) 
                   )
# 84 "parser.fsy"
                 : Syntax.t));
# 426 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "parser.fsy"
                           Sqrt(_2) 
                   )
# 87 "parser.fsy"
                 : Syntax.t));
# 437 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "parser.fsy"
                           match _2 with
                         | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
                         | e -> Neg(e) 
                   )
# 90 "parser.fsy"
                 : Syntax.t));
# 450 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "parser.fsy"
                           Add(_1, _3) 
                   )
# 94 "parser.fsy"
                 : Syntax.t));
# 462 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "parser.fsy"
                           Sub(_1, _3) 
                   )
# 96 "parser.fsy"
                 : Syntax.t));
# 474 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "parser.fsy"
                           Mul(_1, _3) 
                   )
# 98 "parser.fsy"
                 : Syntax.t));
# 486 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "parser.fsy"
                           Div(_1, _3) 
                   )
# 100 "parser.fsy"
                 : Syntax.t));
# 498 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "parser.fsy"
                           Eq(_1, _3) 
                   )
# 102 "parser.fsy"
                 : Syntax.t));
# 510 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "parser.fsy"
                           Not(Eq(_1, _3)) 
                   )
# 104 "parser.fsy"
                 : Syntax.t));
# 522 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "parser.fsy"
                           Not(LE(_3, _1)) 
                   )
# 106 "parser.fsy"
                 : Syntax.t));
# 534 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "parser.fsy"
                           Not(LE(_1, _3)) 
                   )
# 108 "parser.fsy"
                 : Syntax.t));
# 546 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "parser.fsy"
                           LE(_1, _3) 
                   )
# 110 "parser.fsy"
                 : Syntax.t));
# 558 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "parser.fsy"
                           LE(_3, _1) 
                   )
# 112 "parser.fsy"
                 : Syntax.t));
# 570 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "parser.fsy"
                           If(_2, _4, _6) 
                   )
# 115 "parser.fsy"
                 : Syntax.t));
# 583 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "parser.fsy"
                           FNeg(_2) 
                   )
# 118 "parser.fsy"
                 : Syntax.t));
# 594 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "parser.fsy"
                           FAdd(_1, _3) 
                   )
# 120 "parser.fsy"
                 : Syntax.t));
# 606 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "parser.fsy"
                           FSub(_1, _3) 
                   )
# 122 "parser.fsy"
                 : Syntax.t));
# 618 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "parser.fsy"
                           FMul(_1, _3) 
                   )
# 124 "parser.fsy"
                 : Syntax.t));
# 630 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "parser.fsy"
                           FDiv(_1, _3) 
                   )
# 126 "parser.fsy"
                 : Syntax.t));
# 642 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "parser.fsy"
                           Let(addtyp _2, _4, _6) 
                   )
# 129 "parser.fsy"
                 : Syntax.t));
# 655 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundef)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "parser.fsy"
                           LetRec(_3, _5) 
                   )
# 132 "parser.fsy"
                 : Syntax.t));
# 667 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'actual_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "parser.fsy"
                           App(_1, _2) 
                   )
# 135 "parser.fsy"
                 : Syntax.t));
# 679 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'elems)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "parser.fsy"
                           Tuple(_1) 
                   )
# 137 "parser.fsy"
                 : Syntax.t));
# 690 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'pat)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "parser.fsy"
                           LetTuple(_3, _6, _8) 
                   )
# 139 "parser.fsy"
                 : Syntax.t));
# 703 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "parser.fsy"
                           Put(_1, _4, _7) 
                   )
# 141 "parser.fsy"
                 : Syntax.t));
# 716 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "parser.fsy"
                           Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) 
                   )
# 143 "parser.fsy"
                 : Syntax.t));
# 728 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "parser.fsy"
                           Array(_2, _3) 
                   )
# 146 "parser.fsy"
                 : Syntax.t));
# 740 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "parser.fsy"
                           failwith
                     	(Printf.sprintf "parse error near characters %d-%d"
                     	   (Parsing.symbol_start ())
                     	   (Parsing.symbol_end ())) 
                   )
# 148 "parser.fsy"
                 : Syntax.t));
# 753 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "parser.fsy"
                           { name = addtyp _1; args = _2; body = _4 } 
                   )
# 155 "parser.fsy"
                 : 'fundef));
# 766 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "parser.fsy"
                           addtyp _1 :: _2 
                   )
# 159 "parser.fsy"
                 : 'formal_args));
# 778 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "parser.fsy"
                           [addtyp _1] 
                   )
# 161 "parser.fsy"
                 : 'formal_args));
# 789 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'actual_args)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "parser.fsy"
                           _1 @ [_2] 
                   )
# 166 "parser.fsy"
                 : 'actual_args));
# 801 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "parser.fsy"
                           [_1] 
                   )
# 169 "parser.fsy"
                 : 'actual_args));
# 812 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'elems)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "parser.fsy"
                           _1 @ [_3] 
                   )
# 173 "parser.fsy"
                 : 'elems));
# 824 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "parser.fsy"
                           [_1; _3] 
                   )
# 175 "parser.fsy"
                 : 'elems));
# 836 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "parser.fsy"
                           _1 @ [addtyp _3] 
                   )
# 179 "parser.fsy"
                 : 'pat));
# 848 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "parser.fsy"
                           [addtyp _1; addtyp _3] 
                   )
# 181 "parser.fsy"
                 : 'pat));
|]
# 861 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let exp lexer lexbuf : Syntax.t =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
